---
title: "JoesFlow Documentation"
format: html
theme: 
  light: flatly
  dark: darkly
editor: visual
---

# Installing JoesFlow

## Installation via Docker

The recommended method for running JoesFlow is using Docker, because the images provided have all system dependencies and R packages.

* [Install Docker on your system.](https://docs.docker.com/get-docker/) This will require admin-level access. Using the WSL 2 backend is recommended for Windows computers.
* Open Docker on your computer.
* Mac OS
  * Open Terminal.app
* Windows
  * Open the Windows PowerShell
* Start JoesFlow with the following command: `docker run --user shiny --rm -ti -p 3838:3838 johnsonra/joes-flow`
  * The first time you run this will take several minutes, as it will have to download the image to your computer. The next time you start it up should only take a few seconds.
  * Update your local image (e.g. to update to a new version) with the following command: `docker pull johnsonra/joes-flow`
* Once JoesFlow is running, open this page in your favorite browser: http://localhost:3838/JoesFlow
* To shut down the Docker image when finished, you can enter the command `control-c` in the Terminal/PowerShell window and close it.

## Installation via R

JoesFlow has a lot of dependencies, so in order to install locally in RStudio, you may need to install additional system tools and R packages for full functionality.

``` {r install, eval=FALSE}
# install directly from GitHub
remotes::install_github("NIAID/JoesFlow")
```

Once installed, the Shiny app can be started up as follows:

```{r setup, eval=FALSE}
library(JoesFlow)
run_app()
#> Loading required package: shiny
#> 
#> Listening on http://127.0.0.1:6610
```

![](img/setup-1.png)

# Using JoesFlow

```{r}
#| echo: false
#| message: false

library(ggsci)
library(RColorBrewer)

colors_clusters <- c(pal_d3("category10")(10), pal_d3("category20b")(20), pal_igv("default")(51))
colors_samples <- c(brewer.pal(5, "Set1"), brewer.pal(8, "Dark2"), pal_igv("default")(51))

library(JoesFlow)
library(uwot)

# get root directory of the git repo
root <- system('git rev-parse --show-toplevel', intern = TRUE)

# set seed so that we get the same results every time
set.seed(238479)
```

## Data format

:::{.callout-important}
Need documentation of expected data format
:::

### Flow data

```{r test_data}
#| echo: false
sample_data <- paste0(root, '/tests/flow_test.csv') %>%
  read.csv(sep=',', header=T)

meta_data <- paste0(root, '/tests/metadata.csv') %>%
  read.csv(header=T, sep=',')
```

Sample [flow file](https://github.com/NIAID/JoesFlow/blob/main/tests/flow_test.csv).
```{r test_data output1}
#| echo: false
#| eval: false

# code used to generate the following image
datatable(sample_data[1:100,1:20])
```
![](img/test_data-1.png)

### Metadata file

Sample [metadata file](https://github.com/NIAID/JoesFlow/blob/main/tests/metadata.csv).
```{r test_data output2}
#| echo: false
#| eval: false

# code used to generate the following image
datatable(meta_data)
```
![](img/test_data-2.png)


```{r meta_data format}
#| echo: false
# Convert `meta_data` to named vector as expected by JoesFlow. This is taken care of automatically when loading meta data through the shiny app, assuming the first column contains IDs, and the second column contains Group designations.

meta <- meta_data[,2]
names(meta) <- meta_data[,1]
```


## JoesFlow output

:::{.callout-important}
Need documentation of JoesFlow output. A few figures are shown here, but there are additional outputs that need to be included, along with descriptions for each.
:::


### PCA figures

```{r pca, fig.height = 5, fig.width = 12, fig.align = "center"}
#| echo: false

# PCA cluster
pp <- select(sample_data, -SampleID) %>%
  prcomp(scale=T)
  
pc1 <- clusterJF(pp, ids = sample_data$SampleID, 
            meta = meta_data$Group, 
            colors = colors_samples)
 
# Kmeans cluster
set.seed(23948)
kmeans_groups <- select(sample_data, -SampleID) %>%
  kmeans(10) %$% cluster %>%
  {paste0('C', .)} # add a 'C' on the front of each group
names(kmeans_groups) <- sample_data$SampleID
  
pc2 <- clusterJF(pp, ids = 1:nrow(sample_data),
                 meta = kmeans_groups,
                 colors = colors_clusters,
                 legend.name = 'Kmeans')

pc1 + pc2
```

### UMAP figures

```{r umap, fig.height = 5, fig.width = 12, fig.align = "center"}
#| echo: false

# Umap
mnist_umap <- select(sample_data, -SampleID) %>%
  umap(pca = 15, fast_sgd = TRUE)

um1 <- clusterJF(mnist_umap, ids = sample_data$SampleID,
                 meta = meta_data$Group,
                 colors = colors_samples)

um2 <- clusterJF(mnist_umap, ids = 1:nrow(sample_data),
                 meta = kmeans_groups,
                 colors = colors_clusters,
                 legend.name = 'Kmeans')

um1 + um2
```

### Sample-based PCA

```{r sample based pca, fig.height=5, fig.width=12, fig.align="center"}
#| echo: false

# sample-based pca
groups_table <- with(sample_data, table(SampleID, kmeans_groups))

pp <- apply(groups_table, 2, function(x) x / rowSums(groups_table)) %>%
  prcomp()

gg3 <- sb_clusterJF(pp, ids = rownames(groups_table),
                    meta = meta_data$Group,
                    colors1 = colors_samples,
                    colors2 = colors_clusters)

gg3
```

### Composition plot

```{r comp_plot, fig.height = 6, fig.width = 8, fig.align = "center"}
#| echo: false
compositionJF(meta, kmeans_groups, colors_clusters)$g1
```

![](img/comp_plot-2.png)

### Heat plot

```{r heat_plot, fig.height = 10, fig.width = 12, fig.align = "center"}
#| echo: false
# marker heat plot
select(sample_data, -SampleID) %>%
  marker_heatJF(ids = sample_data$SampleID,
                meta = meta_data$Group,
                kmeans_groups = kmeans_groups,
                colors = colors_samples,
                sample_size = 500)
```